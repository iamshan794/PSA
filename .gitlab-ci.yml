workflow:
  name: shopping-app
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_MERGE_REQUEST_ID'
      when: always

stages:
  - ".pre"
  - test
  - build
  - integration
  - deploy
  - ".post"

variables:
  # No DOCKER_HOST needed for self-hosted runner with Docker
  IMAGE_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  LATEST_TAG: "$CI_REGISTRY_IMAGE:latest"
  APP_IMG_NAME: "google-adk"


lint_job:
  stage: ".pre"
  resource_group: development
  tags:
    - shopping_app
  script:
    - echo "Running linting checks..."
    - echo "Lint Successful"
  allow_failure: false


unit_test_job:
  stage: test
  variables:
    ENV_FILE_DESTINATION: "/workspace/multi_tool_agent/.env"
  tags:
    - shopping_app
  needs:
    - lint_job
  resource_group: development
  script:
    - echo "Running job as ${whoami}"
    - echo "Setting Up Curl..."
    - apk add --no-cache curl
    # Check Docker is available
    - docker --version
    - docker info
    
    # Prepare environment file
    - mkdir -p "$(dirname "$ENV_FILE_DESTINATION")"
    - cp "$AGENT_ENV_FILE" "$ENV_FILE_DESTINATION" || echo "No env file to copy"
    
    # Build the image
    - test -n "$(docker images -q "$APP_IMG_NAME")" || docker build -t "$APP_IMG_NAME:test" .

    # Option 2: Use docker exec to test inside container
    - echo "Testing API server with docker exec..."
    - docker stop "${APP_IMG_NAME}_api_test" 2>/dev/null || true
    - docker rm "${APP_IMG_NAME}_api_test" 2>/dev/null || true
    - docker run -d --rm --name "${APP_IMG_NAME}_api_test" "$APP_IMG_NAME:test" bash -c "adk api_server --host=0.0.0.0 && sleep 60"
    - sleep 10
    - docker exec "${APP_IMG_NAME}_api_test" pwd
    - docker exec "${APP_IMG_NAME}_api_test" ls
    - docker exec "${APP_IMG_NAME}_api_test" curl -v http://localhost:8000/ || echo "Internal API test failed"
    - docker exec "${APP_IMG_NAME}_api_test" curl -L http://localhost:8000/docs || echo "Internal API test failed"
    - sleep 10
    - docker logs "${APP_IMG_NAME}_api_test"
    - docker stop "${APP_IMG_NAME}_api_test" || true
    
    
    - echo "Unit tests completed"
    
  allow_failure: false 
  

mongodb_test_job:
  stage: test
  tags:
    - shopping_app
  needs:
    - lint_job
  resource_group: development
  variables:
    MONGO_INITDB_ROOT_USERNAME: admin
    MONGO_INITDB_ROOT_PASSWORD: password123
    MONGO_PORT: 27017
  script:
    - echo "Testing MongoDB with Docker..."
    
    # Clean up any existing MongoDB containers
    - docker stop test_mongodb 2>/dev/null || true
    - docker rm test_mongodb 2>/dev/null || true
    
    # Start MongoDB container
    - echo "Starting MongoDB container..."
    - |
      docker run -d \
        --name test_mongodb \
        -p $MONGO_PORT:27017 \
        -e MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME \
        -e MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD \
        mongo:latest
    
    # Wait for MongoDB to be ready
    - echo "Waiting for MongoDB to start..."
    - sleep 20
    - docker logs test_mongodb
    
    # Test MongoDB connectivity using Docker client
    - echo "Testing MongoDB connectivity..."
    - |
      docker run --rm --network host mongo:latest \
        mongosh --host localhost --port $MONGO_PORT \
        --username $MONGO_INITDB_ROOT_USERNAME \
        --password $MONGO_INITDB_ROOT_PASSWORD \
        --eval "db.adminCommand('ping')"
    
    # Test basic operations
    - echo "Testing basic MongoDB operations..."
    - |
      docker run --rm --network host mongo:latest \
        mongosh --host localhost --port $MONGO_PORT \
        --username $MONGO_INITDB_ROOT_USERNAME \
        --password $MONGO_INITDB_ROOT_PASSWORD \
        --eval "
          db = db.getSiblingDB('testdb');
          db.testcollection.insertOne({test: 'data', timestamp: new Date()});
          print('Document inserted');
          var count = db.testcollection.countDocuments();
          print('Document count: ' + count);
          db.testcollection.find().limit(1).forEach(printjson);
        "
    
    # Test connection from different network (container to container)
    - echo "Testing container-to-container connectivity..."
    - |
      docker run --rm --link test_mongodb:mongodb mongo:latest \
        mongosh --host mongodb --port 27017 \
        --username $MONGO_INITDB_ROOT_USERNAME \
        --password $MONGO_INITDB_ROOT_PASSWORD \
        --eval "
          print('Connected to MongoDB from another container');
          db.adminCommand('ping');
        "
    
    # Check MongoDB container status
    - echo "Checking MongoDB container status..."
    - docker ps | grep test_mongodb || echo "MongoDB container not running"
    - docker exec test_mongodb mongosh --version || echo "MongoDB shell version check failed"
    
    - echo "MongoDB tests completed successfully"
  
  after_script:
    # Cleanup
    - docker stop test_mongodb 2>/dev/null || true
    - docker rm test_mongodb 2>/dev/null || true
  
  allow_failure: false