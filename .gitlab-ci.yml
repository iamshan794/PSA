workflow:
  name: shopping-app
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_MERGE_REQUEST_ID'
      when: always

stages:
  - ".pre"
  - test
  - build
  - deploy

variables:
  
  IMAGE_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  LATEST_TAG: "$CI_REGISTRY_IMAGE:latest"
  APP_IMG_NAME: google-adk
  APP_IMG_TAG: latest
  APP_CONTAINER_NAME: google-adk-container
  APP_HOST: 0.0.0.0
  API_HOST: real-time-product-search.p.rapidapi.com
  PROJECT_PATH: /workspace

.lint_job:
  stage: ".pre"
  resource_group: development
  tags:
    - shopping_app
  script:
    - echo "Running linting checks..."
    - echo "Lint Successful"
  allow_failure: false

test_container:
  stage: test
  variables:
    #Destination to write the .env file required to run the agent
    ENV_FILE_DESTINATION: "$PROJECT_PATH/multi_tool_agent/.env"
  tags:
    - shopping_app
  # needs:
  #   - lint_job

  resource_group: development

  before_script:

    - echo "Setting Up Curl..."
    - apk add --no-cache curl
    - apk add --no-cache gettext

    - echo "Check docker version"
    - docker --version && docker info
    
    - echo "Setup Docker Compose"
    - apk update && apk add docker-cli-compose
  
    # - mkdir -p "$(dirname "$ENV_FILE_DESTINATION")"
    # - cp "$AGENT_ENV_FILE" "$ENV_FILE_DESTINATION" || echo "No env file to copy"
  
  script:

    - docker build \
      --build-arg ENV_CONTENT="$(cat $AGENT_ENV_FILE)" \
      --build-arg MONGODB_URI="${MONGODB_URI}" \
      --build-arg API_URL="${API_URL}" \
      --build-arg API_URL="${APP_HOST}" \
      --build-arg API_KEY="${API_KEY}" \
      --build-arg API_HOST="${API_HOST}" \
      --build-arg PROJECT_PATH="${PROJECT_PATH}" \
      --build-arg FASTAPI_HOST="${APP_HOST}" \
      -t $IMAGE_TAG .
    
    #Stop and remove previous instances of the app
    - docker stop "${APP_IMG_NAME}" 2>/dev/null || true
    - docker rm "${APP_IMG_NAME}" 2>/dev/null || true
    - envsubst < docker-compose.yml > docker-compose.tmp.yml
    
    - docker compose -f docker-compose.tmp.yml up -d 

    - docker exec -d "${APP_CONTAINER_NAME}" sh $PROJECT_ROOT/start.sh
    - sleep 20
    #Test database, FastAPI server and frontend app
    - docker exec "${APP_CONTAINER_NAME}" python3 $PROJECT_ROOT/multi_tool_agent/ping_mongodb.py ping
    - docker exec "${APP_CONTAINER_NAME}" curl -v http://localhost:8000/docs || echo "Internal API test failed"
    - docker exec "${APP_CONTAINER_NAME}" curl -v http://localhost:8501 || echo "App not responding"
    
  after_script:

    - docker logs "${APP_CONTAINER_NAME}"
    - docker stop "${APP_CONTAINER_NAME}" || true
    - echo "Container test completed"
    
  allow_failure: false 
  
.build_gc:
  stage: build
  image: google/cloud-sdk:alpine
  needs: 
    - test_container
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    REGISTRY_LOCATION: "us-central1"
    REPOSITORY_NAME: "docker-repo"
    IMAGE_TAG: "$REGISTRY_LOCATION-docker.pkg.dev/$GC_PROJECT_ID/$REPOSITORY_NAME/$APP_IMG_NAME:$CI_COMMIT_SHA"
    LATEST_TAG: "$REGISTRY_LOCATION-docker.pkg.dev/$GC_PROJECT_ID/$REPOSITORY_NAME/$APP_IMG_NAME:latest"
  before_script:
    # Wait for Docker daemon
    - until docker info; do sleep 1; done
    - gcloud auth activate-service-account --key-file "$GC_SERVICE_ACCOUNT_KEY"
    - gcloud config set project $GC_PROJECT_ID
    - gcloud auth configure-docker $REGISTRY_LOCATION-docker.pkg.dev
  script:
    - docker build \
      --build-arg ENV_CONTENT="$(cat $AGENT_ENV_FILE)" \
      --build-arg MONGODB_URI="${MONGODB_URI}" \
      --build-arg API_URL="${API_URL}" \
      --build-arg API_URL="${APP_HOST}" \
      --build-arg API_KEY="${API_KEY}" \
      --build-arg API_HOST="${API_HOST}" \
      --build-arg PROJECT_PATH="${PROJECT_PATH}" \
      --build-arg FASTAPI_HOST="${APP_HOST}" \
      -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - docker tag $IMAGE_TAG $LATEST_TAG
    - docker push $LATEST_TAG

.deploy_job:
  stage: deploy
  image: google/cloud-sdk:alpine
  needs:
    - build_gc
  variables:
    REGISTRY_LOCATION: "us-central1"
    REPOSITORY_NAME: "docker-repo"
    IMAGE_TAG: "$REGISTRY_LOCATION-docker.pkg.dev/$GC_PROJECT_ID/$REPOSITORY_NAME/$APP_IMG_NAME:$CI_COMMIT_SHA"
    CLOUD_RUN_SERVICE_NAME: "google-adk"
    CLOUD_RUN_REGION: "us-central1"
  before_script:
    - gcloud auth activate-service-account --key-file "$GC_SERVICE_ACCOUNT_KEY"
    - gcloud config set project $GC_PROJECT_ID
  script:
    - |
      gcloud run deploy $CLOUD_RUN_SERVICE_NAME \
        --image $IMAGE_TAG \
        --region $CLOUD_RUN_REGION \
        --platform managed \
        --allow-unauthenticated \
        --port 8501 \
        --timeout 900 \
        --cpu 2 \
        --memory 4Gi \
        --max-instances 5 \
        --min-instances 1 