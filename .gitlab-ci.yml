workflow:
  name: shopping-app
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_MERGE_REQUEST_ID
      when: always

stages:
  - ".pre"
  - test
  - build
  - integration
  - deploy
  - ".post"

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  # Use your GitLab registry
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  LATEST_TAG: $CI_REGISTRY_IMAGE:latest

lint_job:
  stage: ".pre"
  resource_group: development
  tags:
    - shopping_app
  script:
    - echo "Running linting checks..."
    # Add actual linting commands here
    # - flake8 . || pylint . || your_linter
    - echo "Lint Successful"
  allow_failure: false

unit_test_job:
  stage: test
  variables:
    ENV_FILE_DESTINATION: "/workspace/multi_tool_agent/.env"
  tags:
    - shopping_app
  needs:
    - lint_job
  resource_group: development
  script:
    - echo "Running unit tests..."
    # Build test image
    - docker build -t google-adk-test .
    # Run unit tests (non-interactive)
    - docker run --rm google-adk-test \
      --name google_adk_test_instance
      -p "8000:8000" \
      -p "8501:8501" \
      -v ".:/workspace" \
      -e "$ENV_FILE_DESTINATION:ENV_FILE_DESTINATION" \
      -e "$AGENT_ENV_FILE:AGENT_ENV_FILE" \
      bash -c "
      cp "$AGENT_ENV_FILE" "ENV_FILE_DESTINATION"
      adk api_server --host=0.0.0.0 && curl -V http://localhost:8000/docs/
      "
    - echo "Unit tests completed"
  allow_failure: false

mongodb_test_job:
  stage: test
  tags:
    - shopping_app
  needs:
    - lint_job
  resource_group: development
  script:
    - echo "Testing MongoDB connectivity..."
    # Test MongoDB container can start
    - docker run --rm --name mongodb-test -d mongo:latest
    - sleep 10
    - docker exec mongodb-test mongosh --eval "db.runCommand('ping')" || echo "MongoDB basic test"
    - docker stop mongodb-test
    - echo "MongoDB test completed"
  allow_failure: false

docker_build_job:
  stage: build
  resource_group: development
  needs:
    - unit_test_job
    - mongodb_test_job
  tags:
    - shopping_app
  before_script:
    # Login to GitLab registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Building Docker images..."
    
    # Build the main application image
    - docker build -t $IMAGE_TAG .
    - docker tag $IMAGE_TAG $LATEST_TAG
    
    # Test the built image
    - docker run --rm $IMAGE_TAG python --version
    
    - echo "Docker build completed successfully"
  after_script:
    - docker logout $CI_REGISTRY
  allow_failure: false

integration_test_job:
  stage: integration
  resource_group: development
  needs:
    - docker_build_job
  tags:
    - shopping_app
  variables:
    AGENT_ENV_FILE: "$CI_PROJECT_DIR/multi_tool_agent/.env"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Running integration tests..."
    
    # Pull the built image
    - docker pull $IMAGE_TAG
    
    # Update docker-compose to use the built image
    - sed -i "s|image: google_adk:latest|image: \"$IMAGE_TAG\"|g" docker-compose.yml
    
    # Start services
    - docker compose up -d
    
    # Wait for services to be ready
    - echo "Waiting for services to start..."
    - sleep 30
    
    # Check if services are running
    - docker compose ps
    
    # Test MongoDB connectivity (non-interactive)
    - docker compose exec -T google-adk python ping_mongodb.py ping || echo "MongoDB ping test"
    
    # Test API endpoints if available
    - docker compose exec -T google-adk curl -f http://localhost:8000/health || echo "Health check test"
    
    # Run integration tests
    - docker compose exec -T google-adk echo "Add integration tests"
    
    - echo "Integration tests completed"
  after_script:
    # Always cleanup
    - docker compose down -v
    - docker logout $CI_REGISTRY
  allow_failure: false